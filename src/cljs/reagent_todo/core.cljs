(ns reagent-todo.core
  (:require
   [reagent.core :as reagent :refer [atom]]
   [reagent.dom :as rdom]
   [reagent.session :as session]
   [reitit.frontend :as reitit]
   [clerk.core :as clerk]
   [accountant.core :as accountant]))

;; -------------------------
;; Routes

(def router
  (reitit/router
   [["/" :index]
    ["/items"
     ["" :items]
     ["/:item-id" :item]]
    ["/about" :about]]))

(defn path-for [route & [params]]
  (if params
    (:path (reitit/match-by-name router route params))
    (:path (reitit/match-by-name router route))))

;; -------------------------
;; Page components

(defonce app-db (atom {:filter :all
                       :todos [{:id 1 :text "Learn Reagent" :state :todo} {:id 2 :text "Learn Hiccup" :state :todo}]}))

(defn capitalize-state [state]
  (clojure.string/upper-case (name state)))

(defn update-todo [id key value]
  (let [new-todos (map (fn [t]
         (if (= (:id t) id)
           (assoc t key value)
           t))
                       (:todos @app-db))
        new-app-db (assoc @app-db :todos new-todos)]
    (reset! app-db new-app-db)))


(defn filter-todos [state]
  (filter #(= (:state %) state) (:todos @app-db)))

(defn active-todos []
  (filter-todos :todo))

(defn done-todos []
  (filter-todos :done))

(defn active-todo-count []
  (count (active-todos)))

(defn todo-text-input [init-todo]
  (let [!display-input (atom true)
        !input (atom (:text init-todo))]
    (fn [todo]
      [:div {:on-double-click #(reset! !display-input (not @!display-input))}
       (if @!display-input [:div (:text todo)]
           [:input {:type "text"
                    :value @!input
                    :on-change #(reset! !input (-> % .-target .-value))
                    :on-key-press (fn [e]
                                    (cond
                                      (= (-> e .-key) "Enter") (do (update-todo (:id todo)
                                                                            :text
                                                                            @!input)
                                                                (reset! !display-input (not @!display-input)))))}])])))

(defn todo-item [todo]
  [:li
   {:key (:id todo)}
   [:div {:style {:display "flex" :flex-direction "row"}}
    [:span  {:on-click (fn [_] (update-todo (:id todo) :state
                  (if (= (:state todo) :todo)
                    :done
                    :todo)))
             :style {:margin-right 10}}
     (str (capitalize-state (:state todo)) " ")]
    [todo-text-input todo]
    ]
   ])

(defn conj-new-todo [text]
  (let [last-todo (last (:todos @app-db))
        new-todo {:id (random-uuid)
                  :text text
                  :state :todo}
        new-todos (concat (:todos @app-db) [new-todo])
        new-app-db (assoc @app-db :todos new-todos)]
    (reset! app-db new-app-db)))

(defn add-todo []
  (let [!input (atom (str))]
    (fn []
      [:div
       [:input {:type "text"
                :value @!input
                :on-change #(reset! !input (-> % .-target .-value))}]
       [:button {:on-click (fn []
                              (conj-new-todo @!input)
                              (reset! !input (str)))}
        "Add Todo"]])))

(defn todo-list [todos]
  [:ul {:style {:min-height 200}}
   (map todo-item todos)])

(defn active-filter-css [f]
  (if (= (:filter @app-db) f) {:background-color "#23394a" :color "white"} {}))

(defn todo-footer []
  [:div
   [:div (str (active-todo-count) " left to accomplish")]
   [:div
    [:button {:style (active-filter-css :all)
              :on-click #(reset! app-db (assoc @app-db :filter :all))} "All"]
    [:button {:style (active-filter-css :todo)
              :on-click #(reset! app-db (assoc @app-db :filter :todo))}"Active"]
    [:button {:style (active-filter-css :done)
              :on-click #(reset! app-db (assoc @app-db :filter :done))} "Done"]]])

(defn home-page []
  (fn []
    [:span.main
     [:h1 "Welcome to reagent-todo"]
     [add-todo]
     [todo-list
      (cond
                  (= (:filter @app-db) :all) (:todos @app-db)
                  (= (:filter @app-db) :todo) (active-todos)
                  (= (:filter @app-db) :done) (done-todos))]
     [todo-footer]
     ]))


;; -------------------------
;; Translate routes -> page components

(defn page-for [route]
  (case route
    :index #'home-page))


;; -------------------------
;; Page mounting component

(defn current-page []
  (fn []
    (let [page (:current-page (session/get :route))]
      [:div
       [:header
        [:p [:a {:href (path-for :index)} "Home"] " | "
         [:a {:href (path-for :about)} "About reagent-todo"]]]
       [page]
       [:footer
        [:p "reagent-todo was generated by the "
         [:a {:href "https://github.com/reagent-project/reagent-template"} "Reagent Template"] "."]]])))

;; -------------------------
;; Initialize app

(defn mount-root []
  (rdom/render [current-page] (.getElementById js/document "app")))

(defn init! []
  (clerk/initialize!)
  (accountant/configure-navigation!
   {:nav-handler
    (fn [path]
      (let [match (reitit/match-by-path router path)
            current-page (:name (:data  match))
            route-params (:path-params match)]
        (reagent/after-render clerk/after-render!)
        (session/put! :route {:current-page (page-for current-page)
                              :route-params route-params})
        (clerk/navigate-page! path)
        ))
    :path-exists?
    (fn [path]
      (boolean (reitit/match-by-path router path)))})
  (accountant/dispatch-current!)
  (mount-root))
